#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int dt = 0;
typedef struct{
	int node;
	int begin;
	int fin;
	int color;
}node_t;

vector<node_t> graph[10005];
vector<node_t> trans_graph[10005];
int begin[10005];
int fin[10005];
int color[10005];


void DFS(int n, int m){
//	cout << "DEBUG in DFS " << graph[n][m].node << " " << graph[n][m].color << "\n";
	graph[n][m].color = 1;
	dt++;
	graph[n][m].begin = dt;
	for(int i=0; i<graph[graph[n][m].node].size(); i++){
		if(graph[graph[n][m].node][i].color == 0){
			DFS(graph[n][m].node, i);
		}
	}
	graph[n][m].color = 2;
	dt++;
	graph[n][m].fin = dt;
}	

void transpose(int nodes){
	for(int i=0; i<nodes; i++){
		for(int j=0; j<nodes; j++){
			
		}
	}
}

int main(){
        ios::sync_with_stdio(0);
        cin.tie(0);
	int v, e;
	cin >> v >> e;
	
	for(int i=0; i<e; i++){
		int start, end;
		cin >> start >> end;
		node_t temp;
		temp.node = end;
		temp.begin = 0;
		temp.fin = 0;
		temp.color = 0;
		graph[start].push_back(temp);
	}

	for(int i=1; i<=v; i++){
		for(int j=0; j<graph[i].size(); j++){
			if(graph[i][j].color == 0){
				DFS(i, j);      
			}
		}
	}

	for(int i=1; i<=v; i++){
		for(int j=0; j<graph[i].size(); j++){
			cout << "[DEBUG] node: " << graph[i][j].node << " " << graph[i][j].begin << " " << graph[i][j].fin << "\n";
		}
	}
        
	transpose(v);

	
	return 0;
}

